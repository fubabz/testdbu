//buildscript {
//    dependencies {
//        classpath group: 'com.h2database', name: 'h2', version: '1.4.192'
//        //         classpath 'com.h2database:h2:1.4.191'
//    }
//}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
//     classpath "com.ferigma:dbunit-gradle-plugin:0.1.0"
//     classpath "com.h2database:h2:1.4.179"
        classpath 'org.flywaydb:flyway-gradle-plugin:4.0.3'
    }
}

plugins { id "org.flywaydb.flyway" version "4.0.3" }

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'testdbunit'
version = '0.0.1-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

ext {
    db = [
            url     : 'jdbc:postgresql://localhost:5432/ryo',
            // url: 'jdbc:h2:tcp://localhost/sample',
            //'jdbc:h2:tcp://localhost/~/db/sample'
            user    : 'postgres',
            password: 'posugure',
            schema  : 'public',
            //        driver:'org.h2.Driver'
            driver  : 'org.postgresql.Driver'
    ]
}

repositories { mavenCentral() }

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'
    compile group: 'com.h2database', name: 'h2', version: '1.4.192'
    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    compile group: 'org.apache.poi', name: 'poi', version: '3.2-FINAL'
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-core
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.0.3'
    compile('org.mybatis:mybatis:3.2.8') // MyBatis
    compile('org.mybatis.generator:mybatis-generator-core:1.3.5')
    testCompile group: 'org.dbunit', name: 'dbunit', version: '2.5.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task deleteMybatis(type: Delete) {
    delete fileTree("${projectDir}/src/main/java") {
        include 'test/**/*.java'
        include 'test/**/*.xml'
    }

    followSymlinks = false
}

flyway {
    url = db.url
    user = db.user
}

/*
  flyway {
       user = 'postgres'
      password = 'postgres'
      url = 'jdbc:postgresql://localhost:5432/postgres'
      locations = ['classpath:db.migration']
      schemas = ['local', 'remote_bp']
      baselineVersion = 1

    // 接続先を変えたい場合はgradle実行時にプログラム引数を与える。以下例:
    // -Pflyway.user=postgres -Pflyway.password=postgres -Pflyway.schemas=local -Pflyway.url=jdbc:postgresql://10.12.1.61:5432/livemax
    // -Pflyway.user=kikan_web_dbuser -Pflyway.password=J3FrxKgE -Pflyway.schemas=local -Pflyway.url=jdbc:postgresql://10.12.1.11:5432/kikan_db
  }
*/
task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}


task dbrefresh(type: DbunitTask) {
    src = './src/test/resources/live.xml'
    type = 'CLEAN_INSERT'
}

task dbexport(type: DbunitTask) {
    type = 'export'
    dest = './src/test/resources/out.xml'
    doctype = './src/test/resources/outdtd.xml'
}

class DbunitTask extends DefaultTask {
    def db = project.db
    String src = ''
    String type = 'REFRESH'
    String format = 'flat'
    String nullToken = '[null]'
    String dest
    String doctype
    String datatypeFactory = 'org.dbunit.ext.h2.H2DataTypeFactory'

    @TaskAction
    def exec() {
        ant.taskdef(name: 'dbunit', classname: 'org.dbunit.ant.DbUnitTask',
                classpath: project.configurations.testCompile.asPath)

        ant.dbunit(driver: db.driver, url: db.url, userid: db.user, password: db.password, schema: db.schema,
                classpath: project.configurations.compile.asPath) {
            dbconfig() {
                property(name: 'datatypeFactory', value: datatypeFactory)
            }

            switch (type) {
                case 'export':
                    export(dest: dest, doctype: doctype) { table(name: 'T1') }
                    break
                case 'compare':
                    compare()
                    break
                default:
                    operation(type: type, format: format, src: src, nullToken: nullToken) {}
                    break
            }
        }
    }
}

//dbunit {
//   username = "sa"
//   password = "sa"
//   url = "jdbc:h2:/tmp/h2_test"
//   driver = "org.h2.Driver"
//   dataTypeFactoryName = "org.dbunit.ext.h2.H2DataTypeFactory"
//}

//task populateTestDb(type: com.ferigma.gradle.dbunit.tasks.OperationTask) {
//   sources = [
//      new com.ferigma.gradle.dbunit.tasks.vo.OperationSource(
//      transaction: true, type: "CLEAN_INSERT", format: "xml",
//      file: "$rootDir/db/sample-data.xml")
//   ]
//}
