//buildscript {
//    dependencies {
//        classpath group: 'com.h2database', name: 'h2', version: '1.4.192'
//        //         classpath 'com.h2database:h2:1.4.191'
//    }
//}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
//     classpath "com.ferigma:dbunit-gradle-plugin:0.1.0"
//     classpath "com.h2database:h2:1.4.179"
        classpath 'org.flywaydb:flyway-gradle-plugin:4.0.3'
    }
}

plugins { id "org.flywaydb.flyway" version "4.0.3" }

apply plugin: 'java'
apply plugin: 'groovy'
//apply plugin: 'maven'
//apply plugin: 'eclipse'
//apply plugin: 'idea'

group = 'testdbunit'
version = '0.0.1-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

ext {
    // TODO to property file
    db = [
            url     : 'jdbc:postgresql://localhost:5432/postgres',
            // url: 'jdbc:h2:tcp://localhost/sample',
            //'jdbc:h2:tcp://localhost/~/db/sample'
            user    : 'postgres',
            password: 'postgres',
            schema  : 'public',
            //        driver:'org.h2.Driver'
            driver  : 'org.postgresql.Driver'
    ]

    springVersion = '4.3.10.RELEASE'
}

repositories { mavenCentral() }

dependencies {
// https://mvnrepository.com/artifact/org.springframework/spring-context
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
// https://mvnrepository.com/artifact/org.springframework/spring-jdbc
    compile group: 'org.springframework', name: 'spring-jdbc', version: springVersion
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'
    compile group: 'com.h2database', name: 'h2', version: '1.4.192'
// https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.0.0'
//    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    compile group: 'org.apache.poi', name: 'poi', version: '3.2-FINAL'
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-core
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.0.3'
    compile('org.mybatis:mybatis:3.2.8') // MyBatis
    compile('org.mybatis.generator:mybatis-generator-core:1.3.5')
    // https://mvnrepository.com/artifact/org.dbunit/dbunit
    testCompile group: 'org.dbunit', name: 'dbunit', version: '2.5.4'
    // https://mvnrepository.com/artifact/org.spockframework/spock-core
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
// https://mvnrepository.com/artifact/org.springframework/spring-test
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.3.0') // spring-test-dbunit
}

task deleteMybatis(type: Delete) {
    delete fileTree("${projectDir}/src/main/java") {
        include 'test/**/*.java'
        include 'test/**/*.xml'
    }

    followSymlinks = false
}

flyway {
    url = db.url
//    user = db.user
    user = 'postgres'
    password = 'postgres'
//    url = 'jdbc:postgresql://localhost:5432/postgres'
    // clean > build しないと反映されない
//    locations = ['classpath:db.migration']
    schemas = ['public']
    baselineVersion = 1

    // 接続先を変えたい場合はgradle実行時にプログラム引数を与える。以下例:
    // -Pflyway.user=postgres -Pflyway.password=postgres -Pflyway.schemas=local -Pflyway.url=jdbc:postgresql://10.12.1.61:5432/livemax
    // -Pflyway.user=kikan_web_dbuser -Pflyway.password=J3FrxKgE -Pflyway.schemas=local -Pflyway.url=jdbc:postgresql://10.12.1.11:5432/kikan_db
}

task dbrefresh(type: DbunitTask) {
    type = 'CLEAN_INSERT'
    format = 'xls'
    // xlsx は入力可能
    src = './src/test/resources/out.xlsx'
}

task dbexport(type: DbunitTask) {
    type = 'export'
    // xlsx で出力できない
//    format = 'xls'
//    dest = './src/test/resources/out.xls'
    format = 'flat'
    dest = './src/test/resources/out.xml'
    doctype = './src/test/resources/outdtd.xml'
    tableNames = ['table']
}

task dbexportJusho(type: DbunitTask) {
    type = 'export'
    // xlsx で出力できない
//    format = 'xls'
//    dest = './src/test/resources/out.xls'
    format = 'flat'
    dest = './src/test/resources/jusho.xml'
    tableNames = ['t_jusho']
}

task dbexportBank(type: DbunitTask) {
    type = 'export'
    // xlsx で出力できない
//    format = 'xls'
//    dest = './src/test/resources/out.xls'
    format = 'flat'
    dest = './src/test/resources/bank.xml'
    tableNames = ['t_bank']
}

class DbunitTask extends DefaultTask {
    def db = project.db
    String src = ''
    String type = 'REFRESH'
    String format = 'flat'
    String encoding = 'UTF-8'
    String nullToken = '[null]'
    String dest
    String doctype
    String datatypeFactory = 'org.dbunit.ext.h2.H2DataTypeFactory'
    // ant 子要素を直接渡す場合
    def tables = { table(name: 'xxx') }
    // テーブル名を渡す場合
    def tableNames = []
    // def actiontast1 = ant.export()

    @TaskAction
    def exec() {
        //        ant {
        ant.taskdef(name: 'dbunit', classname: 'org.dbunit.ant.DbUnitTask',
                classpath: project.configurations.testCompile.asPath)

        ant.dbunit(driver: db.driver, url: db.url, userid: db.user, password: db.password, schema: db.schema,
                classpath: project.configurations.compile.asPath) {
            dbconfig() {
                property(name: 'datatypeFactory', value: datatypeFactory)
            }
//            taskByType(type, ant)
            //            action.delegate = ant
            actiontast1
        }
    }
    //    }

    def taskByType(type, ant) {
        switch (type) {
            case 'export':
                // テーブル名のみ渡す場合
                ant.export(dest: dest, doctype: doctype, format: format, encoding: encoding) {
                    for (name in tableNames) table(name: name)
                }
                break
            case 'exportclo':
                // closure で直接渡す場合
                ant.export([dest: dest, doctype: doctype, format: format, encoding: encoding], tables)
                break
            case 'compare':
                ant.compare()
                break
            default:
                ant.operation(type: type, format: format, src: src, nullToken: nullToken) {}
                break
        }
    }
}

//dbunit {
//   username = "sa"
//   password = "sa"
//   url = "jdbc:h2:/tmp/h2_test"
//   driver = "org.h2.Driver"
//   dataTypeFactoryName = "org.dbunit.ext.h2.H2DataTypeFactory"
//}

//task populateTestDb(type: com.ferigma.gradle.dbunit.tasks.OperationTask) {
//   sources = [
//      new com.ferigma.gradle.dbunit.tasks.vo.OperationSource(
//      transaction: true, type: "CLEAN_INSERT", format: "xml",
//      file: "$rootDir/db/sample-data.xml")
//   ]
//}
